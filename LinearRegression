{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.linspace(-10,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = a.reshape(-1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "b = 2 * a + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "regr = LinearRegression()\n",
    "regr.fit(a,b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 非线性关系数据 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = a\n",
    "y = (x+1)**2 + 3*x +4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7f38e1e8d668>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regr1 = LinearRegression()\n",
    "\n",
    "regr1.fit(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4741873049729429"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regr1.score(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predicted = regr1.predict(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f38e1e6c358>]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y)\n",
    "plt.plot(x,y_predicted,color='red')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 对特征数据先进行处理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.linspace(-10,10)\n",
    "x = x.reshape(-1,1)\n",
    "y = x**2 + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.220446049250313e-16"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regr = LinearRegression()\n",
    "regr.fit(x,y)\n",
    "regr.score(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f38e1d50a90>]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAD8CAYAAAB5Pm/hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAFnJJREFUeJzt3X2wXGV9wPHvz4RAfL1BXgyBNDDDYLFOhWYoSusgUXmpQ1JHW+xMTZWZjG21opUSxhl16h+G0vo2ozIpoLHDKIoIjMUi5WWcOmNqIOHNQBNRMTeRXAtBO2YU8Okf5yysl929u3t2z55z9vuZuXN3z57d/d2zz/ntuc95nt+JlBKSpOZ63qQDkCSNl4lekhrORC9JDWeil6SGM9FLUsOZ6CWp4Uz0ktRwJnpJajgTvSQ13OJJBwBwxBFHpFWrVk06DEmqlbvuuutnKaUjF1qvEol+1apVbNu2bdJhSFKtRMSP+1nPrhtJajgTvSQ1nIlekhrORC9JDWeil6SGq8Som2HcsH2Wy295iL0HDnLMzFIuPvsk1p2yYtJhSVJfysxhtUz0N2yf5dLr7+Pgk08DMHvgIJdefx+AyV5S5ZWdwxbsuomIqyNif0Tc37bs8Ii4NSJ25b+X5csjIj4dEbsj4t6IOHXkEQOX3/LQMxuo5eCTT3P5LQ+N4+0kaaTKzmH99NF/AThn3rKNwG0ppROB2/L7AOcCJ+Y/G4DPjSbM37b3wMGBlktSlZSdwxZM9CmlbwOPzVu8FtiS394CrGtb/sWU+S4wExHLRxVsyzEzSwdaLklVUnYOG3bUzdEppX0A+e+j8uUrgJ+0rbcnX/YcEbEhIrZFxLa5ubmB3vzis09i6SGLfmvZ0kMWcfHZJw30OpI0CWXnsFGfjI0Oy1KnFVNKm4HNAKtXr+64TjetkxWOupFUR2XnsGET/aMRsTyltC/vmtmfL98DHNe23rHA3iIBdrPulBUmdkm1VWYOG7br5iZgfX57PXBj2/K356NvTgeeaHXxSJImY8Ej+oj4EnAmcERE7AE+DGwCvhIRFwKPAG/NV78ZOA/YDfwSeMcYYpYkDWDBRJ9SeluXh9Z0WDcBf1s0KEnS6FjrRpIazkQvSQ1nopekhjPRS1LDmeglqeFqWaZ4Idaql1QFVclFjUv01qqXVAVVykWN67qxVr2kKqhSLmpcordWvaQqqFIualyit1a9pCqoUi5qXKK3Vr2kKqhSLmrcyVhr1UuqgirlosjqkE3W6tWr07Zt2yYdhiTVSkTclVJavdB6jeu6kST9NhO9JDWciV6SGs5EL0kNZ6KXpIYz0UtSw5noJanhGjdhqpeqlAyV1CxVzy1Tk+irVDJUUnPUIbdMTddNlUqGSmqOOuSWqUn0VSoZKqk56pBbpibRV6lkqKTmqENumZpEX6WSoZKaow65ZWpOxlapZKik5qhDbrFMsSTVlGWKJUmAiV6SGq9Qoo+I90XEAxFxf0R8KSIOi4jjI2JrROyKiGsjYsmogpUkDW7oRB8RK4C/A1anlH4PWARcAFwGfCKldCLwOHDhKAKVJA2naNfNYmBpRCwGng/sA84Crssf3wKsK/gekqQChk70KaVZ4J+BR8gS/BPAXcCBlNJT+Wp7gOqMMZKkKVSk62YZsBY4HjgGeAFwbodVO47fjIgNEbEtIrbNzc0NG4YkaQFFJky9HvhhSmkOICKuB14DzETE4vyo/lhgb6cnp5Q2A5shG0dfII7Cql5iVFI11DVXFOmjfwQ4PSKeHxEBrAG+D9wBvCVfZz1wY7EQx6tVYnT2wEESz5YYvWH77KRDk1Qhdc4VRfrot5KddL0buC9/rc3AJcD7I2I38FLgqhHEOTZ1KDEqafLqnCsK1bpJKX0Y+PC8xQ8DpxV53TLVocSopMmrc66Y+pmxdSgxKmny6pwrpj7R16HEqKTJq3OumJoyxd3UocSopMmrc66wTLEk1ZRliiVJgIlekhrPRC9JDWeil6SGM9FLUsOZ6CWp4aZ+HH0vda1UJ6mYpu37JvouWpXqWkWMWpXqgFp/4JJ6a+K+b9dNF3WuVCdpeE3c9030XdS5Up2k4TVx3zfRd1HnSnWShtfEfd9E30WdK9VJGl4T931PxnZR50p1kobXxH3f6pWSVFNWr5QkASZ6SWo8E70kNZyJXpIazkQvSQ3n8MohNK3gkTSNpmk/NtEPqIkFj6RpM237sV03A2piwSNp2kzbfmyiH1ATCx5J02ba9mMT/YCaWPBImjbTth+b6AfUxIJH0rSZtv3Yk7EDamLBI2naTNt+bFEzSaqpUoqaRcRMRFwXEQ9GxM6IeHVEHB4Rt0bErvz3siLvIUkqpmgf/aeA/0gpvRz4fWAnsBG4LaV0InBbfl+SNCFDJ/qIeDHwWuAqgJTSr1NKB4C1wJZ8tS3AuqJBSpKGV+SI/gRgDvh8RGyPiCsj4gXA0SmlfQD576M6PTkiNkTEtojYNjc3VyAMSVIvRUbdLAZOBd6TUtoaEZ9igG6alNJmYDNkJ2MLxFEp01Q/Q6oD98liR/R7gD0ppa35/evIEv+jEbEcIP+9v1iI9dGqnzF74CCJZ+tn3LB9dtKhSVPJfTIzdKJPKf0U+ElEtGYYrAG+D9wErM+XrQduLBRhjUxb/Qyp6twnM0UnTL0HuCYilgAPA+8g+/L4SkRcCDwCvLXge9TGtNXPkKrOfTJTKNGnlHYAnQbrrynyunV1zMxSZjs0oKbWz5Cqzn0yY62bEZq2+hlS1blPZqx1M0LTVj9Dqjr3yYy1biSppkqpdSNJqj4TvSQ1nIlekhrORC9JDeeom5JYb0MaL/ex7kz0JWjV22hNxW7V2wBsiNIIuI/1ZtdNCay3IY2X+1hvJvoSWG9DGi/3sd5M9CXoVldj2uptSOPiPtabib4E1tuQxst9rDdPxpbAehvSeLmP9WatG0mqKWvdSJIAE70kNZ6JXpIazpOxE+a0bWkw7jODM9FPkNO2pcG4zwzHrpsJctq2NBj3meGY6CfIadvSYNxnhmOinyCnbUuDcZ8Zjol+gpy2LQ3GfWY4noydIKdtS4NxnxmOJRAkqaYsgSBJAkz0ktR4JnpJajhPxlaU07w17dwHRqfwEX1ELIqI7RHxjfz+8RGxNSJ2RcS1EbGkeJjTpTXNe/bAQRLPTvO+YfvspEOTSuE+MFqj6Lp5L7Cz7f5lwCdSSicCjwMXjuA9porTvDXt3AdGq1Cij4hjgT8BrszvB3AWcF2+yhZgXZH3mEZO89a0cx8YraJH9J8E/gH4TX7/pcCBlNJT+f09gJ1qA3Kat6ad+8BoDZ3oI+JNwP6U0l3tizus2nFGVkRsiIhtEbFtbm5u2DAayWnemnbuA6NVZNTNGcD5EXEecBjwYrIj/JmIWJwf1R8L7O305JTSZmAzZDNjC8TROE7z1rRzHxitkZRAiIgzgQ+klN4UEV8FvpZS+nJEXAHcm1L6bK/nWwJBkgY3yRIIlwDvj4jdZH32V43hPSRJfRrJhKmU0p3Anfnth4HTRvG6kqTinBlbM84WVJPYnsthoq8RL4ysJrE9l6feif6ii2DHjklHUZqVjxzg8089/ZzlS65ZBCtnJhCRNDzbc+5Vr4JPfnKsb2H1yhr5dYedotdyqcpsz+Wp9xH9mL8Fq+bvN93ObIcp4CtmlvKdjWdNICJpeLbn8nhEXyPOFlST2J7LU+8j+injbEE1ie25PF4cXJJqyouDS5IAu24axcknqirb5mSZ6BvCySeqKtvm5Nl10xBeek1VZducPBN9Q3jpNVWVbXPyTPQN4aXXVFW2zckz0TeEk09UVbbNyfNkbEM4+URVZducPCdMSVJNOWFKkgTYdTMVnKyistjWqslE33BOVlFZbGvVZddNwzlZRWWxrVWXib7hnKyistjWqstE33BOVlFZbGvVZaJvOCerqCy2teryZGzDOVlFZbGtVZcTpqaYQ+E0LNtONfQ7Ycoj+inlUDgNy7ZTP/bRTymHwmlYtp36MdFPKYfCaVi2nfox0U8ph8JpWLad+jHRTymHwmlYtp36GTrRR8RxEXFHROyMiAci4r358sMj4taI2JX/Xja6cDUq605Zwcfe/EpWzCwlgBUzS/nYm1/pyTQtyLZTP0MPr4yI5cDylNLdEfEi4C5gHfBXwGMppU0RsRFYllK6pNdrObxSkgY39uGVKaV9wL789i8iYiewAlgLnJmvtgW4E+iZ6FUtjpFWi22hGUYyjj4iVgGnAFuBo/MvAVJK+yLiqC7P2QBsAFi5cuUowtAIOEZaLbaF5ih8MjYiXgh8DbgopfTzfp+XUtqcUlqdUlp95JFHFg1DI+IYabXYFpqjUKKPiEPIkvw1KaXr88WP5v33rX78/cVCVJkcI60W20JzFBl1E8BVwM6U0sfbHroJWJ/fXg/cOHx4KptjpNViW2iOIkf0ZwB/CZwVETvyn/OATcAbImIX8Ib8vmrCMdJqsS00R5FRN/8FRJeH1wz7upqshUrNOgqjebp9ppYdbg7LFKtv80dhQHaE52SZ+vIzrbd+x9FbAkF9cxRG8/iZTgcTvfrmKIzm8TOdDiZ69c1RGM3jZzodTPTqm6MwmsfPdDp4KUH1rdcoDEfjVF+vz8jPrtkcdaPCHLlRfX5GzeSoG5XGkRvV52c03Uz0KsyRG9XnZzTdTPQqzJEb1ednNN1M9Cqs18iNG7bPcsam2zl+479zxqbbuWH77ISinB6dtrmja6abiV6FdbuGKMCl19/H7IGDJJ69cIXJfnxaJ13nb3PA67xOMUfdaGzO2HQ7sx36gFfMLOU7G8+aQETN5zafLo660cR5ArB8bnN1YqLX2HgCsHxuc3ViotfYeJJ2vDzpqn6Z6DU2nqQdH0+6ahCejFXpPGFYnNtQ4MlYVZgnDItzG2oQVq9U6Y6ZWdrxaPSYmaVWweyg0zbptQ2l+TyiV+m6nTB83cuPtO9+nm598a97+ZGedFXfTPQqXbeTtHc8OGeFxXm6VZ2848E5T7qqb3bdaCLWnbLiOUnpfdfu6Lhuq9+5yd063f62Xn3xnbah1ImJXpWxUN99+4Uz2ocT1j3Z9frb7IvXKNh1o8roNdmnyRfO6PW3OQFKo+ARvSqj1/VLe3Xr1KlLp1OsC3XPgNd0VTFOmFItdJsgNLP0EH711G9qcS3UbtdtPeyQ5/H4L598zvpOftJC+p0w5RG9auHis0/qmCQj6NmlM6kj4U5H7t26aA5d/DyWHrLoOX+b3TMaFY/oVRudkuf7rt1BtxbcKXm2au2M6gugU0xAxy+l+Um+JYBP/Pmr7J7RwPo9ojfRq9a6deksiuDpDm27V1cPdP8CGCShd+uK6RaTXTQa1kQTfUScA3wKWARcmVLa1Gt9E72G1a3fu9vRczcLfQEMktB76fZfhkfvGsbEippFxCLgM8C5wMnA2yLi5FG/jwTdZ9muGHCc+YGDT3bt6+/Wtz5okm+PzdmsKtM4TsaeBuxOKT0MEBFfBtYC3x/De0ldZ4iO4ih8mGqQ3f47aHUFmdhVtnEk+hXAT9ru7wH+cAzvI3XVbfw5DPYF0JqBOsjQzo+c/4qO722C16SMI9FHh2XPOREQERuADQArV64cQxiadr2Onvv9Auj12EIJ3cSuqhhHot8DHNd2/1hg7/yVUkqbgc2QnYwdQxxSR4N8AbSvZ0JXXY181E1ELAb+B1gDzALfA/4ipfRAt+c46kaSBjexmbEppaci4t3ALWTDK6/uleQlSeM1lhIIKaWbgZvH8dqSpMFYpliSGs5EL0kNZ6KXpIarRFGziJgDfjzk048AfjbCcEbFuAZjXIMxrsFVNbYicf1OSunIhVaqRKIvIiK29TO8qGzGNRjjGoxxDa6qsZURl103ktRwJnpJargmJPrNkw6gC+MajHENxrgGV9XYxh5X7fvoJUm9NeGIXpLUQy0SfUS8NSIeiIjfRMTqeY9dGhG7I+KhiDi7y/OPj4itEbErIq6NiCVjiPHaiNiR//woInZ0We9HEXFfvt7YK7lFxEciYrYttvO6rHdOvg13R8TGEuK6PCIejIh7I+LrETHTZb1SttdCf39EHJp/xrvztrRqXLG0vedxEXFHROzM2/97O6xzZkQ80fb5fmjcceXv2/Nzicyn8+11b0ScWkJMJ7Vthx0R8fOIuGjeOqVtr4i4OiL2R8T9bcsOj4hb81x0a0Qs6/Lc9fk6uyJifeFgUkqV/wF+FzgJuBNY3bb8ZOAe4FDgeOAHwKIOz/8KcEF++wrgr8cc778AH+ry2I+AI0rcdh8BPrDAOovybXcCsCTfpiePOa43Aovz25cBl01qe/Xz9wN/A1yR374AuLaEz245cGp++0VkVWHnx3Um8I2y2lO/nwtwHvBNsutTnA5sLTm+RcBPycaZT2R7Aa8FTgXub1v2T8DG/PbGTu0eOBx4OP+9LL+9rEgstTiiTyntTCk91OGhtcCXU0q/Sin9ENhNdinDZ0REAGcB1+WLtgDrxhVr/n5/BnxpXO8xBs9c/jGl9GugdfnHsUkpfSul9FR+97tk1y2YlH7+/rVkbQeytrQm/6zHJqW0L6V0d377F8BOsiu41cFa4Isp811gJiKWl/j+a4AfpJSGnYhZWErp28Bj8xa3t6Nuuehs4NaU0mMppceBW4FzisRSi0TfQ6fLFs7fEV4KHGhLKp3WGaU/Bh5NKe3q8ngCvhURd+VX2SrDu/N/n6/u8q9iP9txnN5JdvTXSRnbq5+//5l18rb0BFnbKkXeVXQKsLXDw6+OiHsi4psR8YqSQlroc5l0m7qA7gdbk9heLUenlPZB9kUOHNVhnZFvu7GUKR5GRPwn8LIOD30wpXRjt6d1WDZ/GFFflzbsR58xvo3eR/NnpJT2RsRRwK0R8WD+zT+0XnEBnwM+SvY3f5SsW+md81+iw3MLD8fqZ3tFxAeBp4BrurzMyLdXp1A7LBtbOxpURLwQ+BpwUUrp5/Mevpuse+L/8vMvNwAnlhDWQp/LJLfXEuB84NIOD09qew1i5NuuMok+pfT6IZ7Wz2ULf0b2b+Pi/Eis46UNRxFjZFfXejPwBz1eY2/+e39EfJ2s26BQ4up320XEvwLf6PBQX5d/HHVc+UmmNwFrUt452eE1Rr69Oujn72+tsyf/nF/Cc/8tH7mIOIQsyV+TUrp+/uPtiT+ldHNEfDYijkgpjbWmSx+fy1jaVJ/OBe5OKT06/4FJba82j0bE8pTSvrwra3+HdfaQnUtoOZbs/OTQ6t51cxNwQT4i4niyb+b/bl8hTyB3AG/JF60Huv2HUNTrgQdTSns6PRgRL4iIF7Vuk52QvL/TuqMyr1/0T7u83/eAEyMbnbSE7N/em8Yc1znAJcD5KaVfdlmnrO3Vz99/E1nbgawt3d7ty2lU8nMAVwE7U0of77LOy1rnCiLiNLJ9+n/HHFc/n8tNwNvz0TenA0+0uixK0PW/6klsr3na21G3XHQL8MaIWJZ3tb4xXza8Ms4+F/0hS1B7gF8BjwK3tD32QbIREw8B57Ytvxk4Jr99AtkXwG7gq8ChY4rzC8C75i07Bri5LY578p8HyLowxr3t/g24D7g3b2TL58eV3z+PbFTHD0qKazdZP+SO/OeK+XGVub06/f3AP5J9EQEclred3XlbOqGEbfRHZP+y39u2nc4D3tVqZ8C7821zD9lJ7deUEFfHz2VeXAF8Jt+e99E2Wm7MsT2fLHG/pG3ZRLYX2ZfNPuDJPH9dSHZe5zZgV/778Hzd1cCVbc99Z97WdgPvKBqLM2MlqeHq3nUjSVqAiV6SGs5EL0kNZ6KXpIYz0UtSw5noJanhTPSS1HAmeklquP8HPEeLT3q8qRcAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y)\n",
    "plt.plot(x,regr.predict(x),color='red')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regr1 = LinearRegression()\n",
    "regr1.fit(x**2,y)\n",
    "regr1.score(x**2,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
